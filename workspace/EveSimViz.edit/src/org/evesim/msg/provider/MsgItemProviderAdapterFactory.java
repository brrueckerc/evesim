/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.evesim.msg.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.evesim.msg.util.MsgAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MsgItemProviderAdapterFactory extends MsgAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MsgItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.msg.EveMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveMessageItemProvider eveMessageItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.msg.EveMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveMessageAdapter() {
		if (eveMessageItemProvider == null) {
			eveMessageItemProvider = new EveMessageItemProvider(this);
		}

		return eveMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.msg.EveLogMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveLogMessageItemProvider eveLogMessageItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.msg.EveLogMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveLogMessageAdapter() {
		if (eveLogMessageItemProvider == null) {
			eveLogMessageItemProvider = new EveLogMessageItemProvider(this);
		}

		return eveLogMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.msg.EveUpdateMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveUpdateMessageItemProvider eveUpdateMessageItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.msg.EveUpdateMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveUpdateMessageAdapter() {
		if (eveUpdateMessageItemProvider == null) {
			eveUpdateMessageItemProvider = new EveUpdateMessageItemProvider(this);
		}

		return eveUpdateMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.msg.EveSerializedMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveSerializedMessageItemProvider eveSerializedMessageItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.msg.EveSerializedMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveSerializedMessageAdapter() {
		if (eveSerializedMessageItemProvider == null) {
			eveSerializedMessageItemProvider = new EveSerializedMessageItemProvider(this);
		}

		return eveSerializedMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.msg.EveMessageBundle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveMessageBundleItemProvider eveMessageBundleItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.msg.EveMessageBundle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveMessageBundleAdapter() {
		if (eveMessageBundleItemProvider == null) {
			eveMessageBundleItemProvider = new EveMessageBundleItemProvider(this);
		}

		return eveMessageBundleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.msg.EveDataMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveDataMessageItemProvider eveDataMessageItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.msg.EveDataMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveDataMessageAdapter() {
		if (eveDataMessageItemProvider == null) {
			eveDataMessageItemProvider = new EveDataMessageItemProvider(this);
		}

		return eveDataMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.msg.EveFileMessageSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveFileMessageSinkItemProvider eveFileMessageSinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.msg.EveFileMessageSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveFileMessageSinkAdapter() {
		if (eveFileMessageSinkItemProvider == null) {
			eveFileMessageSinkItemProvider = new EveFileMessageSinkItemProvider(this);
		}

		return eveFileMessageSinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (eveMessageItemProvider != null) eveMessageItemProvider.dispose();
		if (eveLogMessageItemProvider != null) eveLogMessageItemProvider.dispose();
		if (eveUpdateMessageItemProvider != null) eveUpdateMessageItemProvider.dispose();
		if (eveSerializedMessageItemProvider != null) eveSerializedMessageItemProvider.dispose();
		if (eveMessageBundleItemProvider != null) eveMessageBundleItemProvider.dispose();
		if (eveDataMessageItemProvider != null) eveDataMessageItemProvider.dispose();
		if (eveFileMessageSinkItemProvider != null) eveFileMessageSinkItemProvider.dispose();
	}

}
