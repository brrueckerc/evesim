/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.evesim.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.evesim.util.EvesimAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EvesimItemProviderAdapterFactory extends EvesimAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EvesimItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveComponentItemProvider eveComponentItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveComponentAdapter() {
		if (eveComponentItemProvider == null) {
			eveComponentItemProvider = new EveComponentItemProvider(this);
		}

		return eveComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveSimulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveSimulationItemProvider eveSimulationItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveSimulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveSimulationAdapter() {
		if (eveSimulationItemProvider == null) {
			eveSimulationItemProvider = new EveSimulationItemProvider(this);
		}

		return eveSimulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveMonitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveMonitorItemProvider eveMonitorItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveMonitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveMonitorAdapter() {
		if (eveMonitorItemProvider == null) {
			eveMonitorItemProvider = new EveMonitorItemProvider(this);
		}

		return eveMonitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveNodeItemProvider eveNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveNodeAdapter() {
		if (eveNodeItemProvider == null) {
			eveNodeItemProvider = new EveNodeItemProvider(this);
		}

		return eveNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveNodeServer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveNodeServerItemProvider eveNodeServerItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveNodeServer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveNodeServerAdapter() {
		if (eveNodeServerItemProvider == null) {
			eveNodeServerItemProvider = new EveNodeServerItemProvider(this);
		}

		return eveNodeServerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EvePrototype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvePrototypeItemProvider evePrototypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EvePrototype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvePrototypeAdapter() {
		if (evePrototypeItemProvider == null) {
			evePrototypeItemProvider = new EvePrototypeItemProvider(this);
		}

		return evePrototypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveAgentItemProvider eveAgentItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveAgentAdapter() {
		if (eveAgentItemProvider == null) {
			eveAgentItemProvider = new EveAgentItemProvider(this);
		}

		return eveAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveServiceItemProvider eveServiceItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveServiceAdapter() {
		if (eveServiceItemProvider == null) {
			eveServiceItemProvider = new EveServiceItemProvider(this);
		}

		return eveServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveConnectionItemProvider eveConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveConnectionAdapter() {
		if (eveConnectionItemProvider == null) {
			eveConnectionItemProvider = new EveConnectionItemProvider(this);
		}

		return eveConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.evesim.EveLocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EveLocationItemProvider eveLocationItemProvider;

	/**
	 * This creates an adapter for a {@link org.evesim.EveLocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEveLocationAdapter() {
		if (eveLocationItemProvider == null) {
			eveLocationItemProvider = new EveLocationItemProvider(this);
		}

		return eveLocationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (eveComponentItemProvider != null) eveComponentItemProvider.dispose();
		if (eveSimulationItemProvider != null) eveSimulationItemProvider.dispose();
		if (eveMonitorItemProvider != null) eveMonitorItemProvider.dispose();
		if (eveNodeItemProvider != null) eveNodeItemProvider.dispose();
		if (eveNodeServerItemProvider != null) eveNodeServerItemProvider.dispose();
		if (evePrototypeItemProvider != null) evePrototypeItemProvider.dispose();
		if (eveAgentItemProvider != null) eveAgentItemProvider.dispose();
		if (eveServiceItemProvider != null) eveServiceItemProvider.dispose();
		if (eveConnectionItemProvider != null) eveConnectionItemProvider.dispose();
		if (eveLocationItemProvider != null) eveLocationItemProvider.dispose();
	}

}
